name: CI

on:
  workflow_call: {}

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x.x'

      - name: Build
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Test
        run: |
          pwd
          dotnet test --configuration Release --no-build --verbosity normal \
              /p:CollectCoverage=true \
              /p:CoverletOutputFormat=opencover \
              /p:CoverletOutput="${{ github.workspace }}/TestResults/Coverage/coverage.opencover.xml"

      - name: Get changed files
        id: changed-files
        if: github.event_name == 'pull_request'
        run: |
          # Get list of changed .cs files in this PR
          CHANGED_FILES=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path | select(endswith(".cs"))' | tr '\n' ';')
          echo "changed-files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "Changed C# files: $CHANGED_FILES"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate markdown report
        run: |
          dotnet new tool-manifest
          dotnet tool install dotnet-reportgenerator-globaltool
          dotnet tool restore
          
          # Build the reportgenerator command
          REPORT_CMD="dotnet reportgenerator -reports:\"${{ github.workspace }}/TestResults/Coverage/coverage.opencover.xml\" -targetdir:\"${{ github.workspace }}/TestResults/Coverage\" -reporttypes:MarkdownSummary"
          
          # Add file filters if this is a PR with changed files
          if [[ "${{ github.event_name }}" == "pull_request" && -n "${{ steps.changed-files.outputs.changed-files }}" ]]; then
            CHANGED_FILES="${{ steps.changed-files.outputs.changed-files }}"
            
            # Convert semicolon-separated list to reportgenerator filter format using bash
            # Remove trailing semicolon if present
            CHANGED_FILES=${CHANGED_FILES%;}
            
            # Replace semicolons with ;+ and add + at the beginning
            FILE_FILTERS="+*${CHANGED_FILES//;/;+}"
            
            REPORT_CMD="$REPORT_CMD -filefilters:\"$FILE_FILTERS\""
            echo "Filtering coverage report to changed files: $FILE_FILTERS"
          else
            echo "Generating full coverage report (no PR context or no changed files)"
          fi
          
          # Execute the command
          eval $REPORT_CMD
        env:
          PATH: ${{ runner.tool_cache }}/dotnet:$PATH

      - name: Upload coverage output
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-raw
          path: ./TestResults/Coverage/coverage.opencover.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-md
          path: "${{ github.workspace }}/TestResults/Coverage"

      - name: Add coverage to PR
        if: github.event_name == 'pull_request' && steps.changed-files.outputs.changed-files
        run: |
          # Build the comment body
          COMMENT_BODY="## üìä Code Coverage Report"
          COMMENT_BODY="$COMMENT_BODY"$'\n'"*Coverage report filtered to show only files modified in this PR*"$'\n'
          COMMENT_BODY="$COMMENT_BODY"$'\n'"$(cat ./TestResults/Coverage/Summary.md)"
          
          # Debug: Show all comments to understand the structure
          echo "=== All PR comments ==="
          gh pr view ${{ github.event.pull_request.number }} --json comments --jq '.comments[] | {author: .author.login, body: .body[0:50], url: .url}'
          
          # Look for existing coverage comment
          echo "=== Looking for coverage comment ==="
          
          # Get all comment URLs and bodies, then use grep to find the coverage comment
          EXISTING_COMMENT_URL=$(gh pr view ${{ github.event.pull_request.number }} --json comments --jq -r '.comments[] | "\(.url)|\(.body)"' | grep "## üìä Code Coverage Report" | cut -d'|' -f1 | head -1)
          
          echo "Found URL: '$EXISTING_COMMENT_URL'"
          
          if [[ -n "$EXISTING_COMMENT_URL" && "$EXISTING_COMMENT_URL" != "null" ]]; then
            # Extract comment ID from the GitHub URL
            # URL format: https://github.com/owner/repo/pull/7#issuecomment-1234567890
            COMMENT_ID=$(echo "$EXISTING_COMMENT_URL" | grep -o 'issuecomment-[0-9]*' | cut -d'-' -f2)
            echo "Updating comment ID: $COMMENT_ID"
            
            # Update the existing comment
            gh api repos/${{ github.repository }}/issues/comments/$COMMENT_ID \
              --method PATCH \
              --field body="$COMMENT_BODY" && echo "‚úÖ Updated existing comment" || echo "‚ùå Failed to update"
          else
            echo "Creating new coverage comment"
            gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}